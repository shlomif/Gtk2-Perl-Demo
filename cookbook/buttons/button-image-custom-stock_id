#!/usr/bin/perl
use warnings;
use strict;
use Glib qw/TRUE FALSE/;
use Gtk2 '-init';

# create a new window
my $window = Gtk2::Window->new('toplevel');
$window->set_title("Pixmap'd Buttons!");
$window ->signal_connect( "destroy" => sub { Gtk2->main_quit; } );

# sets the border width of the window
$window->set_border_width(10);

my @zxpm = (
" 16 12 4 1 ",
"   s None  c None",
".  c black",
"X  c red",
"o  c #5B5B57574646",
"                ",
"  ...........   ",
"  XXXXXXXXXXX   ",
"         XXX    ",
"        XXX     ",
"       XXX      ",
"    ooXXXoo     ",
"     XXX        ",
"    XXX         ",
"   XXX          ",
"  XXXXXXXXXXXX  ",
"  ...........   "
);


# the stock id our stock item will be accessed with
my $stock_id = 'Z';

# add a new entry to the stock system with our id
Gtk2::Stock->add ({
    stock_id => $stock_id,
    label    => 'Zentara',
    #modifier => [],
    #keyval   => $Gtk2::Gdk::Keysyms{L},
    #translation_domain => 'gtk2-perl-example',
});

# create an icon set, with only one member in this particular case
my $icon_set = Gtk2::IconSet->new_from_pixbuf (
           Gtk2::Gdk::Pixbuf->new_from_xpm_data ( @zxpm ));

# create a new icon factory to handle rendering the image at various sizes...
my $icon_factory = Gtk2::IconFactory->new;
# add our new stock icon to it...
$icon_factory->add ($stock_id, $icon_set);
# and then add this custom icon factory to the list of default places in
# which to search for stock ids, so any gtk+ code can find our stock icon.
$icon_factory->add_default;

# create a new button
my $button = Gtk2::Button->new_from_stock('Z');

# connect the 'clicked' signal of the button to our callback
$button->signal_connect( "clicked" => \&callback, "cool button" );

$button->show();

$window->add($button);

$window->show();

# rest in the GTK main loop and wait for the fun to begin!
Gtk2->main;
#####################################################################
# Create a new hbox with an image and a label packed into it and return
# the box.
sub xpm_label_box {
my ( $xpm_filename, $label_text ) = @_;

# create box for image and label
my $box = Gtk2::HBox->new( FALSE, 0 );
$box->set_border_width(2);

# now on to the image stuff
my $image = Gtk2::Image->new_from_file($xpm_filename);

# Create a label for the button
my $label = Gtk2::Label->new($label_text);

# pack the image and label into the box
$box->pack_start( $image, FALSE, FALSE, 3 );
$box->pack_start( $label, FALSE, FALSE, 3 );

$image->show;
$label->show;

return $box;
}
##################################################
# our usual callback function
sub callback {
my $widget = shift;
my $data   = shift;
printf "Hello again - %s was pressed\n", $data;
}
##################################################
